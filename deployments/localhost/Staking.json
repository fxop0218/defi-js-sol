{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Staking__NeedsMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__NotEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrewStake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REWARD_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e48d27908990efb75f1fd8f19fa1c03cdb110bb5c2b46b9b70860dc29dd48a7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1137340",
    "logsBloom": "0x
    "blockHash": "0x25cdec8ce3a1765505da3432bd5cff37a30dc162685ad4bb5e08350aefab609d",
    "transactionHash": "0x0e48d27908990efb75f1fd8f19fa1c03cdb110bb5c2b46b9b70860dc29dd48a7",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1137340",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "042e202dc72e2b9c5062eba0d489b5ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Staking__NeedsMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"earned(address)\":{\"notice\":\"How much reward a user has earned\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror Staking__NotEnoughETH();\\r\\nerror Staking__TransactionFailed();\\r\\nerror Staking__NeedsMoreThanZero();\\r\\n\\r\\ncontract Staking is ReentrancyGuard {\\r\\n    // variables\\r\\n    IERC20 public s_stakingToken;\\r\\n    IERC20 public s_rewardToken;\\r\\n\\r\\n    uint256 public s_totalSupply;\\r\\n    uint256 public constant REWARD_RATE = 100;\\r\\n    uint256 public s_lastUpdateTime;\\r\\n    uint256 public s_rewardPerTokenStored;\\r\\n\\r\\n    mapping(address => uint256) public s_userRewardPerTokenPaid;\\r\\n    mapping(address => uint256) s_stakingBalance;\\r\\n    mapping(address => uint256) s_rewards;\\r\\n\\r\\n    event Staked(address indexed user, uint256 indexed amount);\\r\\n    event WithdrewStake(address indexed user, uint256 indexed amount);\\r\\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\\r\\n\\r\\n    constructor(address stakingToken, address rewardToken) {\\r\\n        s_stakingToken = IERC20(stakingToken);\\r\\n        s_rewardToken = IERC20(rewardToken);\\r\\n    }\\r\\n\\r\\n    function stake(uint256 amount)\\r\\n        external\\r\\n        updateReward(msg.sender)\\r\\n        moreThanZero(amount)\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (amount < 0) {\\r\\n            revert Staking__NotEnoughETH();\\r\\n        }\\r\\n        s_stakingBalance[msg.sender] = s_stakingBalance[msg.sender] + amount;\\r\\n        s_totalSupply = s_totalSupply + amount;\\r\\n\\r\\n        bool success = s_stakingToken.transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        if (!success) {\\r\\n            revert Staking__TransactionFailed();\\r\\n        }\\r\\n\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) external updateReward(msg.sender) nonReentrant {\\r\\n        if (amount > s_stakingBalance[msg.sender]) {\\r\\n            revert Staking__NotEnoughETH();\\r\\n        }\\r\\n\\r\\n        s_stakingBalance[msg.sender] = s_stakingBalance[msg.sender] - amount;\\r\\n        s_totalSupply = s_totalSupply - amount;\\r\\n\\r\\n        bool success = s_stakingToken.transfer(msg.sender, amount);\\r\\n\\r\\n        if (!success) {\\r\\n            revert Staking__TransactionFailed();\\r\\n        }\\r\\n\\r\\n        emit WithdrewStake(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function claimReward() external updateReward(msg.sender) nonReentrant {\\r\\n        uint256 reward = s_rewards[msg.sender];\\r\\n        s_rewards[msg.sender] = 0;\\r\\n        emit RewardsClaimed(msg.sender, reward);\\r\\n        bool success = s_rewardToken.transfer(msg.sender, reward);\\r\\n        if (!success) {\\r\\n            revert Staking__TransactionFailed();\\r\\n        }\\r\\n\\r\\n        emit RewardsClaimed(msg.sender, reward);\\r\\n    }\\r\\n\\r\\n    function rewardPerToken() public view returns (uint256) {\\r\\n        if (s_totalSupply == 0) {\\r\\n            return s_rewardPerTokenStored;\\r\\n        }\\r\\n        return\\r\\n            s_rewardPerTokenStored +\\r\\n            (((block.timestamp - s_lastUpdateTime) * REWARD_RATE * 1e18) / s_totalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice How much reward a user has earned\\r\\n     */\\r\\n    function earned(address account) public view returns (uint256) {\\r\\n        return\\r\\n            ((s_stakingBalance[account] * (rewardPerToken() - s_userRewardPerTokenPaid[account])) /\\r\\n                1e18) + s_rewards[account];\\r\\n    }\\r\\n\\r\\n    modifier updateReward(address account) {\\r\\n        s_rewardPerTokenStored = rewardPerToken();\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n        s_rewards[account] = earned(account);\\r\\n        s_userRewardPerTokenPaid[account] = s_rewardPerTokenStored;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier moreThanZero(uint256 amount) {\\r\\n        if (amount <= 0) {\\r\\n            revert Staking__NeedsMoreThanZero();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Getter function\\r\\n    function getStaked(address account) public view returns (uint256) {\\r\\n        return s_stakingBalance[account];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1d8415bd898c820b650067a473331e7aa4ebb07c3aa9cc42c7ca3b7c3418f256\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620013e6380380620013e6833981810160405281019062000037919062000133565b600160008190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200017a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000fb82620000ce565b9050919050565b6200010d81620000ee565b81146200011957600080fd5b50565b6000815190506200012d8162000102565b92915050565b600080604083850312156200014d576200014c620000c9565b5b60006200015d858286016200011c565b925050602062000170858286016200011c565b9150509250929050565b61125c806200018a6000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80636a74a0fc1161008c578063adca9b7211610066578063adca9b7214610201578063b88a802f1461021f578063cd3daf9d14610229578063f245ace414610247576100ce565b80636a74a0fc146101a95780636aa0838f146101c7578063a694fc3a146101e5576100ce565b80628cc262146100d35780632e1a7d4d14610103578063304ac91b1461011f578063399080ec1461013d5780635997bb371461016d5780636374cc001461018b575b600080fd5b6100ed60048036038101906100e89190610e68565b610277565b6040516100fa9190610eae565b60405180910390f35b61011d60048036038101906101189190610ef5565b610379565b005b6101276106b5565b6040516101349190610eae565b60405180910390f35b61015760048036038101906101529190610e68565b6106bb565b6040516101649190610eae565b60405180910390f35b610175610704565b6040516101829190610eae565b60405180910390f35b610193610709565b6040516101a09190610f81565b60405180910390f35b6101b161072f565b6040516101be9190610eae565b60405180910390f35b6101cf610735565b6040516101dc9190610eae565b60405180910390f35b6101ff60048036038101906101fa9190610ef5565b61073b565b005b610209610a77565b6040516102169190610f81565b60405180910390f35b610227610a9d565b005b610231610d8b565b60405161023e9190610eae565b60405180910390f35b610261600480360381019061025c9190610e68565b610ded565b60405161026e9190610eae565b60405180910390f35b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a7640000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461030a610d8b565b6103149190610fcb565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461035e9190610fff565b6103689190611070565b61037291906110a1565b9050919050565b33610382610d8b565b6005819055504260048190555061039881610277565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260005403610466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045d90611132565b60405180910390fd5b6002600081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156104e7576040517f46acff9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105329190610fcb565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816003546105839190610fcb565b6003819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016105e8929190611161565b6020604051808303816000875af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b91906111c2565b905080610664576040517fcfd4541e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff167f4cb6da433ea55f6e302b7bdbfeed740816a42301cde7f5bac5dff2b34037637460405160405180910390a35060016000819055505050565b60055481565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60045481565b33610744610d8b565b6005819055504260048190555061075a81610277565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000811161081e576040517f9b677fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260005403610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a90611132565b60405180910390fd5b600260008190555060008310156108a6576040517f46acff9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108f191906110a1565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508260035461094291906110a1565b6003819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016109a9939291906111ef565b6020604051808303816000875af11580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec91906111c2565b905080610a25576040517fcfd4541e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a3506001600081905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b33610aa6610d8b565b60058190555042600481905550610abc81610277565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260005403610b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8190611132565b60405180910390fd5b60026000819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550803373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe60405160405180910390a36000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610cbe929190611161565b6020604051808303816000875af1158015610cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0191906111c2565b905080610d3a576040517fcfd4541e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe60405160405180910390a35050600160008190555050565b60008060035403610da0576005549050610dea565b600354670de0b6b3a7640000606460045442610dbc9190610fcb565b610dc69190610fff565b610dd09190610fff565b610dda9190611070565b600554610de791906110a1565b90505b90565b60066020528060005260406000206000915090505481565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e3582610e0a565b9050919050565b610e4581610e2a565b8114610e5057600080fd5b50565b600081359050610e6281610e3c565b92915050565b600060208284031215610e7e57610e7d610e05565b5b6000610e8c84828501610e53565b91505092915050565b6000819050919050565b610ea881610e95565b82525050565b6000602082019050610ec36000830184610e9f565b92915050565b610ed281610e95565b8114610edd57600080fd5b50565b600081359050610eef81610ec9565b92915050565b600060208284031215610f0b57610f0a610e05565b5b6000610f1984828501610ee0565b91505092915050565b6000819050919050565b6000610f47610f42610f3d84610e0a565b610f22565b610e0a565b9050919050565b6000610f5982610f2c565b9050919050565b6000610f6b82610f4e565b9050919050565b610f7b81610f60565b82525050565b6000602082019050610f966000830184610f72565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fd682610e95565b9150610fe183610e95565b9250828203905081811115610ff957610ff8610f9c565b5b92915050565b600061100a82610e95565b915061101583610e95565b925082820261102381610e95565b9150828204841483151761103a57611039610f9c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107b82610e95565b915061108683610e95565b92508261109657611095611041565b5b828204905092915050565b60006110ac82610e95565b91506110b783610e95565b92508282019050808211156110cf576110ce610f9c565b5b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061111c601f836110d5565b9150611127826110e6565b602082019050919050565b6000602082019050818103600083015261114b8161110f565b9050919050565b61115b81610e2a565b82525050565b60006040820190506111766000830185611152565b6111836020830184610e9f565b9392505050565b60008115159050919050565b61119f8161118a565b81146111aa57600080fd5b50565b6000815190506111bc81611196565b92915050565b6000602082840312156111d8576111d7610e05565b5b60006111e6848285016111ad565b91505092915050565b60006060820190506112046000830186611152565b6112116020830185611152565b61121e6040830184610e9f565b94935050505056fea26469706673582212201858ba18945e76207e78c333d0b59f23467ef69fc561afef913cf4d6940e000964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ce5760003560e01c80636a74a0fc1161008c578063adca9b7211610066578063adca9b7214610201578063b88a802f1461021f578063cd3daf9d14610229578063f245ace414610247576100ce565b80636a74a0fc146101a95780636aa0838f146101c7578063a694fc3a146101e5576100ce565b80628cc262146100d35780632e1a7d4d14610103578063304ac91b1461011f578063399080ec1461013d5780635997bb371461016d5780636374cc001461018b575b600080fd5b6100ed60048036038101906100e89190610e68565b610277565b6040516100fa9190610eae565b60405180910390f35b61011d60048036038101906101189190610ef5565b610379565b005b6101276106b5565b6040516101349190610eae565b60405180910390f35b61015760048036038101906101529190610e68565b6106bb565b6040516101649190610eae565b60405180910390f35b610175610704565b6040516101829190610eae565b60405180910390f35b610193610709565b6040516101a09190610f81565b60405180910390f35b6101b161072f565b6040516101be9190610eae565b60405180910390f35b6101cf610735565b6040516101dc9190610eae565b60405180910390f35b6101ff60048036038101906101fa9190610ef5565b61073b565b005b610209610a77565b6040516102169190610f81565b60405180910390f35b610227610a9d565b005b610231610d8b565b60405161023e9190610eae565b60405180910390f35b610261600480360381019061025c9190610e68565b610ded565b60405161026e9190610eae565b60405180910390f35b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a7640000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461030a610d8b565b6103149190610fcb565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461035e9190610fff565b6103689190611070565b61037291906110a1565b9050919050565b33610382610d8b565b6005819055504260048190555061039881610277565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260005403610466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045d90611132565b60405180910390fd5b6002600081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156104e7576040517f46acff9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105329190610fcb565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816003546105839190610fcb565b6003819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016105e8929190611161565b6020604051808303816000875af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b91906111c2565b905080610664576040517fcfd4541e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff167f4cb6da433ea55f6e302b7bdbfeed740816a42301cde7f5bac5dff2b34037637460405160405180910390a35060016000819055505050565b60055481565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60045481565b33610744610d8b565b6005819055504260048190555061075a81610277565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000811161081e576040517f9b677fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260005403610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a90611132565b60405180910390fd5b600260008190555060008310156108a6576040517f46acff9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108f191906110a1565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508260035461094291906110a1565b6003819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016109a9939291906111ef565b6020604051808303816000875af11580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec91906111c2565b905080610a25576040517fcfd4541e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a3506001600081905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b33610aa6610d8b565b60058190555042600481905550610abc81610277565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260005403610b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8190611132565b60405180910390fd5b60026000819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550803373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe60405160405180910390a36000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610cbe929190611161565b6020604051808303816000875af1158015610cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0191906111c2565b905080610d3a576040517fcfd4541e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe60405160405180910390a35050600160008190555050565b60008060035403610da0576005549050610dea565b600354670de0b6b3a7640000606460045442610dbc9190610fcb565b610dc69190610fff565b610dd09190610fff565b610dda9190611070565b600554610de791906110a1565b90505b90565b60066020528060005260406000206000915090505481565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e3582610e0a565b9050919050565b610e4581610e2a565b8114610e5057600080fd5b50565b600081359050610e6281610e3c565b92915050565b600060208284031215610e7e57610e7d610e05565b5b6000610e8c84828501610e53565b91505092915050565b6000819050919050565b610ea881610e95565b82525050565b6000602082019050610ec36000830184610e9f565b92915050565b610ed281610e95565b8114610edd57600080fd5b50565b600081359050610eef81610ec9565b92915050565b600060208284031215610f0b57610f0a610e05565b5b6000610f1984828501610ee0565b91505092915050565b6000819050919050565b6000610f47610f42610f3d84610e0a565b610f22565b610e0a565b9050919050565b6000610f5982610f2c565b9050919050565b6000610f6b82610f4e565b9050919050565b610f7b81610f60565b82525050565b6000602082019050610f966000830184610f72565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fd682610e95565b9150610fe183610e95565b9250828203905081811115610ff957610ff8610f9c565b5b92915050565b600061100a82610e95565b915061101583610e95565b925082820261102381610e95565b9150828204841483151761103a57611039610f9c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107b82610e95565b915061108683610e95565b92508261109657611095611041565b5b828204905092915050565b60006110ac82610e95565b91506110b783610e95565b92508282019050808211156110cf576110ce610f9c565b5b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061111c601f836110d5565b9150611127826110e6565b602082019050919050565b6000602082019050818103600083015261114b8161110f565b9050919050565b61115b81610e2a565b82525050565b60006040820190506111766000830185611152565b6111836020830184610e9f565b9392505050565b60008115159050919050565b61119f8161118a565b81146111aa57600080fd5b50565b6000815190506111bc81611196565b92915050565b6000602082840312156111d8576111d7610e05565b5b60006111e6848285016111ad565b91505092915050565b60006060820190506112046000830186611152565b6112116020830185611152565b61121e6040830184610e9f565b94935050505056fea26469706673582212201858ba18945e76207e78c333d0b59f23467ef69fc561afef913cf4d6940e000964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "earned(address)": {
        "notice": "How much reward a user has earned"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 789,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_stakingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)703"
      },
      {
        "astId": 792,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)703"
      },
      {
        "astId": 794,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 799,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_lastUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 801,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardPerTokenStored",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 805,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_userRewardPerTokenPaid",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 809,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_stakingBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 813,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewards",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)703": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}